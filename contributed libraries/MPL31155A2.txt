// MPL31155A2 low level helper functions
func readAltitudeBuffer(_ buffer: UnsafePointer<Int8>) -> Float 

func readPressureBuffer(_ buffer: UnsafePointer<Int8>) -> Float 

func readTemperatureBuffer(_ buffer: UnsafePointer<Int8>) -> Float 

func blockingWriteControlReg1(value: UInt8) 

func blockingWaitForStatusFlag(flag: UInt8) 

/* Snippets:
 {
        "MPL31155A2":[

            {"partName":"Setup MPL31155A2",
                "partCode":"// setup I2C with standard parameters\nsetupI2C(speed: 0x47, premultiplier: 0)\n\n// enable the MPL31155A2 sensor for reading oversampled 128x\nblockingCheckSensor()\nblockingSetupSensorFlags()"
            },

            {"partName":"Get temperature reading",
                "partCode":"let temp: Float = blockingGetTemperature()"
            },

            {"partName":"Get altitude reading",
                "partCode":"let alt: Float = blockingGetAltitude()"
            },

            {"partName":"Get pressure reading",
                "partCode":"let press: Float = blockingGetPressure()"
            }
        ]
 }
*/
// MPL31155A2 high level functions
/// Get the current altitude from a running sensor.
public func blockingGetAltitude() -> Float 

/// Get the current pressure from a running sensor.
public func blockingGetPressure() -> Float 

/// Get the current temperature from a running sensor.
public func blockingGetTemperature() -> Float 

/// Once I2C has been set up, check that the sensor is available and connected.
public func blockingCheckSensor() -> Bool 

/// When I2C is running and we are sure the sensor is present, setup standard flags.
public func blockingSetupSensorFlags() 

